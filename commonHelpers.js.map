{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n//додавання змінних для дом елемента кнопка запуску\nconst buttonDom = document.querySelector('.section button[data-start]');\n\n//додавання змінних для дом елементів відображення елментів\nconst timerDom = document.querySelectorAll('.timer .field span.value');\n\n// затемененя кнопки для розуміння неактивності кнопки\nbuttonDom.classList.add('inactive');\n\n// визначення змінних!!!!!!!!!!!\nlet userSelectedDate;\n\n// визначення поточного дати та часу\nconst curDate = new Date();\n\n// визначення змінної поточного шндентифікатора setInterval() для його видалення\nlet outerItnervalId;\n\n//визначення змінної для прибрання навішування слухача при обранні тієїєж дати відліку\nlet deltaDatePrev;\nlet optionsIziToast = {\n  theme: 'dark',\n  timeout: 5000,\n  message: 'Please choose a date in the future',\n  position: 'topRight', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter\n  progressBarColor: 'rgb(254, 80, 68)',\n  closeOnClick: true,\n  displayMode: 'once',\n  // messageSize: 22,\n  iconUrl: './img/x-circle.svg',\n  close: false,\n};\n\n// опції для flatpickr\nconst optionsFlatpickr = {\n  enableTime: true, //відображення дати\n  time_24hr: true, // 24-часовий відображення\n  defaultDate: new Date(), //потчні дата на приклад як -  placeholder\n  minuteIncrement: 1, // встановлення часу минімальні зміни на 1 хвилину\n  onClose: closeCalendar, //визов функції після обрання дати та часу\n};\n\n// конфігурування flatpickr із підключенням опцій\nflatpickr('#datetime-picker', optionsFlatpickr);\n\n/**\n * функція запуску відліку до обраної дати\n * @param {Array} selectedDates формат обраноъ дати\n * @returns\n */\nfunction closeCalendar(selectedDates) {\n  //обраний час юзером\n  userSelectedDate = selectedDates[0];\n  // дельта дат обраної та поточної\n  let deltaDateCur = userSelectedDate.getTime() - curDate.getTime();\n  // перевірку на дати в минулому\n  if (deltaDateCur < 0) {\n    // відображення попееджувальноого напису\n    // window.alert('Please choose a date in the future');\n    iziToast.error(optionsIziToast);\n    // кнопка отримує стиль класу'.inactive'\n    buttonDom.classList.add('inactive');\n    return;\n  }\n\n  // перевірка зміни обраної дати для виключення повторно обраної дати\n  if (deltaDateCur !== deltaDatePrev) {\n    // видалення стилю класу'.inactive'\n    buttonDom.classList.remove('inactive');\n    // попереднє значення дорівнює поточній дельті дат\n    deltaDatePrev = deltaDateCur;\n    //визов функції як аргумент додано дельту дат\n    iterate(deltaDatePrev);\n  }\n}\n\n/**\n * функція запуску відображення відліку до обраної дати у полі timerDom\n * @param {Numder} value\n */\nfunction iterate(deltaDate) {\n  let value = deltaDate;\n  buttonDom.addEventListener(\n    'click',\n    event => {\n      // Перевіряємо, чи існує інтервал перед тим як створювати новий старий треба стерти\n      if (outerItnervalId) {\n        clearInterval(outerItnervalId);\n      }\n      // завдання сетІнтревалу() для рахування value\n      let intervalId = setInterval(() => {\n        //пертворення value до обєкту із 4 параметрами день, час, хвилина, секунда\n        let objDateData = convertMs(value);\n        // відображення знаяень у span\n        addsDataToDom({ objDateData, timerDom });\n        //зменьшення значення value на 1000мікросекунд\n        value -= 1000;\n        //умова завершення циклу та стирання сетІнтервалу()\n        if (value < 0) {\n          console.log('Done');\n          clearInterval(intervalId);\n        }\n      }, 1000);\n      //зберегли значення сетІнтревалу() для його видалення після завдання нового сетІнтервалу()\n      outerItnervalId = intervalId;\n      // кнопка отримує стиль класу'.inactive'\n      buttonDom.classList.add('inactive');\n    },\n    { once: true } // працює лише 1 раз потім слухач зникає\n  );\n}\n\n/**\n * функція відображення у елементах timerDom значеннь змінних у objDateData\n * @param { Object} objDateData - формат дати у виглдяді об'єкту { days, hours, minutes, seconds }\n * @param { NodeList} timerDom - timerDom - посилання на дом елементи в HTML\n */\nfunction addsDataToDom({ objDateData, timerDom }) {\n  // ітерація обєкту objDateData\n  for (const item in objDateData) {\n    // ітерація timerDom\n    for (let i = 0; i < timerDom.length; i++) {\n      //якщо i-тий елемент із датасет ==''\n      if (timerDom[i].dataset[item] === '') {\n        // якщо значення timerDom.textContent не змінилося у objDateData\n        if (timerDom[i].textContent !== addLeadingZero(objDateData[item])) {\n          // змінити значення timerDom якщо значення objDateData відповідне змінилося\n          timerDom[i].textContent = addLeadingZero(objDateData[item]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * функція додавання \"0\" до значень за 0...9\n * @param {Number} value - передане значення\n * @returns String\n */\nfunction addLeadingZero(value) {\n  return `${value}`.padStart(2, '0');\n}\n\n/**\n * перетворення значень поточного часу у (ms) для отримання об'єкту із відповідними параметрами\n * @param {NUmber} ms значення часу у мс\n * @returns Object - { days, hours, minutes, seconds }\n */\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["buttonDom","timerDom","userSelectedDate","curDate","outerItnervalId","deltaDatePrev","optionsIziToast","optionsFlatpickr","closeCalendar","selectedDates","deltaDateCur","iziToast","iterate","deltaDate","value","event","intervalId","objDateData","convertMs","addsDataToDom","item","i","addLeadingZero","ms","days","hours","minutes","seconds"],"mappings":"oFAMA,MAAMA,EAAY,SAAS,cAAc,6BAA6B,EAGhEC,EAAW,SAAS,iBAAiB,0BAA0B,EAGrED,EAAU,UAAU,IAAI,UAAU,EAGlC,IAAIE,EAGJ,MAAMC,EAAU,IAAI,KAGpB,IAAIC,EAGAC,EACAC,EAAkB,CACpB,MAAO,OACP,QAAS,IACT,QAAS,qCACT,SAAU,WACV,iBAAkB,mBAClB,aAAc,GACd,YAAa,OAEb,QAAS,qBACT,MAAO,EACT,EAGA,MAAMC,EAAmB,CACvB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAASC,CACX,EAGA,UAAU,mBAAoBD,CAAgB,EAO9C,SAASC,EAAcC,EAAe,CAEpCP,EAAmBO,EAAc,CAAC,EAElC,IAAIC,EAAeR,EAAiB,QAAS,EAAGC,EAAQ,QAAO,EAE/D,GAAIO,EAAe,EAAG,CAGpBC,EAAS,MAAML,CAAe,EAE9BN,EAAU,UAAU,IAAI,UAAU,EAClC,MACD,CAGGU,IAAiBL,IAEnBL,EAAU,UAAU,OAAO,UAAU,EAErCK,EAAgBK,EAEhBE,EAAQP,CAAa,EAEzB,CAMA,SAASO,EAAQC,EAAW,CAC1B,IAAIC,EAAQD,EACZb,EAAU,iBACR,QACAe,GAAS,CAEHX,GACF,cAAcA,CAAe,EAG/B,IAAIY,EAAa,YAAY,IAAM,CAEjC,IAAIC,EAAcC,EAAUJ,CAAK,EAEjCK,EAAc,CAAE,YAAAF,EAAa,SAAAhB,CAAQ,CAAE,EAEvCa,GAAS,IAELA,EAAQ,IACV,QAAQ,IAAI,MAAM,EAClB,cAAcE,CAAU,EAE3B,EAAE,GAAI,EAEPZ,EAAkBY,EAElBhB,EAAU,UAAU,IAAI,UAAU,CACnC,EACD,CAAE,KAAM,EAAM,CAClB,CACA,CAOA,SAASmB,EAAc,CAAE,YAAAF,EAAa,SAAAhB,GAAY,CAEhD,UAAWmB,KAAQH,EAEjB,QAASI,EAAI,EAAGA,EAAIpB,EAAS,OAAQoB,IAE/BpB,EAASoB,CAAC,EAAE,QAAQD,CAAI,IAAM,IAE5BnB,EAASoB,CAAC,EAAE,cAAgBC,EAAeL,EAAYG,CAAI,CAAC,IAE9DnB,EAASoB,CAAC,EAAE,YAAcC,EAAeL,EAAYG,CAAI,CAAC,EAKpE,CAOA,SAASE,EAAeR,EAAO,CAC7B,MAAO,GAAGA,CAAK,GAAG,SAAS,EAAG,GAAG,CACnC,CAOA,SAASI,EAAUK,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}